version: "3.7"

services:

  grafana:
    image: grafanadev
    container_name: ${PLATFORM_STACK_NAME}-grafana
    restart: unless-stopped
    build:
      context: ./grafana/
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      # Postgres
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

      # Elasticsearch
      ELASTIC_HOST: ${ELASTIC_HOST}
      ELASTIC_PORT: ${ELASTIC_PORT}
      ELASTIC_USER: ${ELASTIC_USER}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}

      # MySQL
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

      # Dremio
      DREMIO_HOST: ${DREMIO_HOST}
      DREMIO_PORT: ${DREMIO_PORT}
      DREMIO_USER: ${DREMIO_USER}
      DREMIO_PASSWORD: ${DREMIO_PASSWORD}

    links:
      - prometheus:prometheus
      - loki:loki
    volumes:
      - grafana-dashboards:/var/lib/grafana
      - grafana-data:/etc/grafana/
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.rule=Host(`${DOMAIN}`)  && PathPrefix(`/monitoring`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.service=${PLATFORM_STACK_NAME}-grafana
      - traefik.http.services.${PLATFORM_STACK_NAME}-grafana.loadbalancer.server.port=3000
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.middlewares=${PLATFORM_STACK_NAME}-grafana-stripprefix
      - traefik.http.middlewares.${PLATFORM_STACK_NAME}-grafana-stripprefix.stripprefix.prefixes=/monitoring
    networks:
      - traefik-public
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  mysql:
    image: mysqldev
    container_name: ${PLATFORM_STACK_NAME}-mysql
    restart: unless-stopped
    build:
      context: ./mysql/.
      dockerfile: Dockerfile
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    links:
      - loki:loki
    networks:
      - grafana-network
      - traefik-public
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  prometheus:
    image: prometheusdev
    container_name: ${PLATFORM_STACK_NAME}-prometheus
    restart: unless-stopped
    build:
      context: ./prometheus/.
      dockerfile: Dockerfile
    volumes:
      - prometheus-data:/prometheus
    expose:
      - 9090
    ports:
      - "9090:9090"
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  cadvisor:
    image: google/cadvisor:v0.33.0
    container_name: ${PLATFORM_STACK_NAME}-monitoring_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /datadrive/docker/containers/:/datadrive/docker/containers/:ro
    expose:
      - 8080
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  node-exporter:
    image: prom/node-exporter:v1.3.1
    container_name: ${PLATFORM_STACK_NAME}-monitoring_node_exporter
    restart: unless-stopped
    expose:
      - 9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  loki:
    image: lokidev
    container_name: ${PLATFORM_STACK_NAME}-loki
    build:
      context: ./loki/.
      dockerfile: Dockerfile
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  promtail:
    image: promtaildev
    container_name: ${PLATFORM_STACK_NAME}-promtail
    build:
      context: ./promtail/.
      dockerfile: Dockerfile
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro
      - /datadrive/docker/containers/:/datadrive/docker/containers/:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    links:
      - loki:loki
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  filebeat:
    image: filebeatdev
    container_name: ${PLATFORM_STACK_NAME}-filebeat
    build:
      context: ./filebeat/.
      dockerfile: Dockerfile
    user: root
    volumes:
      - type: bind
        source: /datadrive/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    networks:
      - grafana-network
      - traefik-public


#  alertmanager:
#    image: alertmanagerdev
#    container_name: ${PLATFORM_STACK_NAME}-alertmanager
#    restart: unless-stopped
#    build:
#      context: ./alertmanager/.
#      dockerfile: Dockerfile
#    ports:
#      - "9093:9093"
#    command:
#      - '-config.file=/etc/alertmanager/config.yml'
#      - '-storage.path=/alertmanager'
#    networks:
#      - grafana-network
#    logging:
#      driver: "json-file"
#      options:
#        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


volumes:
  grafana-dashboards:
  grafana-data:
  mysql-data:
  prometheus-data:
  loki-data:
#  alertmanager-data:


networks:
  traefik-public:
    external: true
  grafana-network:
    external: true